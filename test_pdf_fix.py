#!/usr/bin/env python3
"""
Test improved PDF generation with realistic application data
"""

import sys
import os
from datetime import datetime

# Add the current directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

def test_realistic_pdf():
    """Test PDF generation with realistic application data structure"""
    print("🧪 Testing IMPROVED PDF Generation with Real App Data")
    print("=" * 60)
    
    try:
        from utils.pdf_generator import PDFGenerator
        from modules.ai_summarizer import AISummarizer
        
        # Simulate what happens when user searches in the app
        print("1. Testing AI Summary Generation...")
        summarizer = AISummarizer()
        
        test_content = """
        Artificial intelligence is revolutionizing healthcare through advanced diagnostic tools, 
        machine learning algorithms for drug discovery, and personalized treatment recommendations. 
        Recent studies show AI systems can detect diseases like cancer with 95% accuracy, 
        significantly improving early diagnosis rates. Electronic health records are being 
        enhanced with AI to provide better patient insights and reduce medical errors.
        """
        
        summary_result = summarizer.summarize_content(test_content, "AI in healthcare")
        print(f"✅ Summary generated by {summary_result.get('provider')}")
        print(f"   Summary length: {len(summary_result.get('summary', ''))} chars")
        
        # Create realistic application results structure (what the app actually creates)
        app_results = {
            'query': 'Artificial Intelligence in Healthcare',
            'timestamp': datetime.now(),
            'mode': 'Enhanced',
            
            # This is what the app stores - the basic summary
            'summary': summary_result,
            
            # Search results from web search
            'search_results': {
                'search_results': [
                    {
                        'title': 'AI Revolutionizing Medical Diagnosis and Treatment',
                        'url': 'https://healthcare-ai.org/diagnosis-treatment-2024',
                        'snippet': 'Artificial intelligence technologies are transforming healthcare by enabling more accurate diagnoses, personalized treatment plans, and improved patient outcomes through advanced machine learning algorithms.',
                        'domain': 'healthcare-ai.org',
                        'source': 'Web Search'
                    },
                    {
                        'title': 'Machine Learning in Drug Discovery: Current Applications',
                        'url': 'https://pharma-research.com/ml-drug-discovery',
                        'snippet': 'Machine learning models are accelerating drug discovery processes, reducing development time from years to months while improving success rates in clinical trials.',
                        'domain': 'pharma-research.com',
                        'source': 'Academic'
                    },
                    {
                        'title': 'Electronic Health Records and AI Integration',
                        'url': 'https://healthtech.gov/ehr-ai-integration',
                        'snippet': 'Government initiatives are promoting the integration of AI systems with electronic health records to enhance patient care coordination and reduce medical errors.',
                        'domain': 'healthtech.gov',
                        'source': 'Government'
                    }
                ],
                'total_results': 3,
                'search_time': 2.1
            },
            
            # Extracted content (what content extractor provides)
            'extracted_content': [
                {
                    'title': 'AI-Powered Diagnostic Tools in Modern Healthcare',
                    'text': 'Artificial intelligence has emerged as a game-changing technology in healthcare diagnostics. Machine learning algorithms can now analyze medical images with unprecedented accuracy, detecting early signs of diseases that might be missed by human observation. Recent implementations in radiology departments show AI systems achieving 95% accuracy in detecting malignant tumors, significantly improving early intervention rates.',
                    'content': 'Artificial intelligence has emerged as a game-changing technology in healthcare diagnostics. Machine learning algorithms can now analyze medical images with unprecedented accuracy, detecting early signs of diseases that might be missed by human observation.',
                    'url': 'https://medical-ai.org/diagnostic-tools',
                    'domain': 'medical-ai.org',
                    'word_count': 89,
                    'publish_date': '2024-01-15',
                    'author': 'Dr. Sarah Johnson'
                },
                {
                    'title': 'Personalized Medicine Through AI Analytics',
                    'text': 'The future of healthcare lies in personalized medicine powered by artificial intelligence. AI systems can analyze patient genetic data, medical history, and lifestyle factors to recommend customized treatment protocols. This approach has shown remarkable success in oncology, where AI-driven treatment recommendations have improved patient survival rates by 30%.',
                    'content': 'The future of healthcare lies in personalized medicine powered by artificial intelligence. AI systems can analyze patient genetic data, medical history, and lifestyle factors to recommend customized treatment protocols.',
                    'url': 'https://personalized-med.edu/ai-analytics',
                    'domain': 'personalized-med.edu',
                    'word_count': 67,
                    'publish_date': '2024-02-01',
                    'author': 'Medical Research Institute'
                }
            ]
        }
        
        print("2. Creating realistic application data structure...")
        print(f"   Query: {app_results['query']}")
        print(f"   Has Summary: {app_results['summary'].get('success', False)}")
        print(f"   Search Results: {len(app_results['search_results']['search_results'])}")
        print(f"   Extracted Content: {len(app_results['extracted_content'])}")
        
        # Test improved PDF generation
        print("\n3. Generating PDF with improved logic...")
        pdf_generator = PDFGenerator()
        pdf_bytes = pdf_generator.generate_pdf(app_results)
        
        if isinstance(pdf_bytes, bytes) and len(pdf_bytes) > 5000:
            print(f"✅ SUCCESS: Comprehensive PDF generated!")
            print(f"   PDF size: {len(pdf_bytes):,} bytes")
            
            # Save the PDF
            filename = 'realistic_app_test.pdf'
            with open(filename, 'wb') as f:
                f.write(pdf_bytes)
            print(f"   💾 PDF saved as '{filename}'")
            
            return True
        else:
            print(f"❌ FAILED: PDF size only {len(pdf_bytes) if isinstance(pdf_bytes, bytes) else 0} bytes")
            return False
            
    except Exception as e:
        print(f"❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_minimal_data():
    """Test with minimal data that user might get"""
    print("\n🧪 Testing with Minimal Data (Edge Case)...")
    
    try:
        from utils.pdf_generator import PDFGenerator
        
        # Minimal data - just search results, no extracted content
        minimal_results = {
            'query': 'Climate Change',
            'search_results': [
                {
                    'title': 'Climate Change Overview',
                    'url': 'https://climate.org/overview',
                    'snippet': 'Climate change refers to long-term shifts in global temperatures and weather patterns.',
                    'domain': 'climate.org'
                }
            ],
            'summary': {
                'success': False,
                'error': 'No API key configured'
            }
        }
        
        pdf_generator = PDFGenerator()
        pdf_bytes = pdf_generator.generate_pdf(minimal_results)
        
        if isinstance(pdf_bytes, bytes) and len(pdf_bytes) > 2000:
            print("✅ Minimal data test: PASS")
            with open('minimal_test.pdf', 'wb') as f:
                f.write(pdf_bytes)
            return True
        else:
            print("❌ Minimal data test: FAIL")
            return False
            
    except Exception as e:
        print(f"❌ Minimal test failed: {str(e)}")
        return False

if __name__ == "__main__":
    print("🚀 Comprehensive PDF Fix Testing")
    print("=" * 60)
    
    # Run tests
    test1_result = test_realistic_pdf()
    test2_result = test_minimal_data()
    
    print("\n" + "=" * 60)
    print("📊 FINAL TEST RESULTS:")
    print(f"Realistic App Data: {'✅ PASS' if test1_result else '❌ FAIL'}")
    print(f"Minimal Data Handling: {'✅ PASS' if test2_result else '❌ FAIL'}")
    
    if test1_result and test2_result:
        print("\n🎉 ALL TESTS PASSED!")
        print("✅ PDF generation now works with actual app data")
        print("✅ PDFs contain real content from summaries and sources")
        print("✅ Handles edge cases gracefully")
        print("\n📋 Files generated:")
        print("- realistic_app_test.pdf (full test)")
        print("- minimal_test.pdf (edge case)")
        print("\n💡 The PDF functionality should now work perfectly in the app!")
    else:
        print("\n⚠️  ISSUES FOUND - Check error messages above")