#!/usr/bin/env python3
"""
Test the enhanced features: Quick/Advanced Search and ChatGPT-style formatting
"""

import sys
import os

# Add the current directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

def test_enhanced_summarization():
    """Test the new structured summarization features"""
    print("🧪 Testing Enhanced Summarization Features...")
    print("=" * 60)
    
    try:
        from modules.ai_summarizer import AISummarizer
        
        summarizer = AISummarizer()
        print("✅ Enhanced AISummarizer initialized")
        
        # Test content
        test_content = """
        Artificial Intelligence (AI) has become one of the most transformative technologies of the 21st century. 
        Recent breakthroughs in machine learning, particularly deep learning and neural networks, have enabled 
        AI systems to achieve remarkable performance in various domains. Companies like OpenAI, Google, and 
        Microsoft are leading innovation in large language models. Healthcare applications show promise for 
        diagnosis and treatment. The technology faces challenges around ethics, regulation, and job displacement.
        Future developments include generative AI, autonomous systems, and quantum computing integration.
        """
        
        # Test Quick Search formatting
        print("\n1. Testing Quick Search Mode...")
        quick_options = {
            'detailed_formatting': True,
            'include_tables': False,
            'include_bullet_points': True,
            'search_speed': '⚡ Quick Search (5-15 seconds)',
            'summary_type': 'brief'
        }
        
        quick_result = summarizer.generate_structured_summary(test_content, "AI developments 2024", quick_options)
        
        if quick_result.get('success'):
            print(f"✅ Quick summary generated by {quick_result.get('provider', 'Unknown')}")
            print(f"📝 Length: {len(quick_result.get('summary', ''))} characters")
            print(f"🎯 Format: {quick_result.get('format_type', 'unknown')}")
            print(f"📋 Structured: {quick_result.get('structured', False)}")
            print(f"\n📋 Quick Summary Preview:")
            print("-" * 40)
            print(quick_result.get('summary', '')[:400] + "...")
            print("-" * 40)
        else:
            print(f"❌ Quick summary failed: {quick_result.get('error', 'Unknown')}")
        
        # Test Advanced Search formatting
        print("\n2. Testing Advanced Search Mode...")
        advanced_options = {
            'detailed_formatting': True,
            'include_tables': True,
            'include_bullet_points': True,
            'search_speed': '🔬 Advanced Search (30-60 seconds)',
            'summary_type': 'comprehensive'
        }
        
        advanced_result = summarizer.generate_structured_summary(test_content, "AI developments 2024", advanced_options)
        
        if advanced_result.get('success'):
            print(f"✅ Advanced summary generated by {advanced_result.get('provider', 'Unknown')}")
            print(f"📝 Length: {len(advanced_result.get('summary', ''))} characters")
            print(f"🎯 Format: {advanced_result.get('format_type', 'unknown')}")
            print(f"📋 Structured: {advanced_result.get('structured', False)}")
            print(f"\n📋 Advanced Summary Preview:")
            print("-" * 40)
            print(advanced_result.get('summary', '')[:600] + "...")
            print("-" * 40)
        else:
            print(f"❌ Advanced summary failed: {advanced_result.get('error', 'Unknown')}")
        
        # Test ChatGPT-style Formatting...
        print("\n3. Testing Advanced AI Formatting...")
        summary_text = quick_result.get('summary', '') if quick_result.get('success') else ''
        
        formatting_checks = {
            'has_headings': '##' in summary_text,
            'has_bullets': '•' in summary_text,
            'has_structure': any(keyword in summary_text for keyword in ['Summary', 'Findings', 'Analysis', 'Insights']),
            'appropriate_length': len(summary_text) > 100
        }
        
        for check, result in formatting_checks.items():
            status = "✅" if result else "❌"
            print(f"{status} {check.replace('_', ' ').title()}: {result}")
        
        all_passed = all(formatting_checks.values())
        print(f"\n🎯 Formatting Quality: {'✅ EXCELLENT' if all_passed else '⚠️ NEEDS IMPROVEMENT'}")
        
        return True
        
    except Exception as e:
        print(f"❌ Enhanced summarization test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_speed_differences():
    """Test the performance differences between Quick and Advanced modes"""
    print("\n" + "=" * 60)
    print("⚡ Testing Speed Mode Differences...")
    
    try:
        from modules.ai_summarizer import AISummarizer
        import time
        
        summarizer = AISummarizer()
        test_content = "AI technology is advancing rapidly. Machine learning models are improving. Healthcare applications are expanding. Future prospects look promising." * 10
        
        # Test Quick Mode timing
        print("\n📊 Speed Comparison Test:")
        
        # Quick mode
        start_time = time.time()
        quick_options = {'search_speed': '⚡ Quick Search (5-15 seconds)', 'detailed_formatting': True}
        quick_result = summarizer.generate_structured_summary(test_content, "AI technology", quick_options)
        quick_time = time.time() - start_time
        
        print(f"⚡ Quick Mode: {quick_time:.2f} seconds")
        print(f"   Result: {'✅ Success' if quick_result.get('success') else '❌ Failed'}")
        print(f"   Length: {len(quick_result.get('summary', ''))}")
        
        # Advanced mode  
        start_time = time.time()
        advanced_options = {'search_speed': '🔬 Advanced Search (30-60 seconds)', 'detailed_formatting': True}
        advanced_result = summarizer.generate_structured_summary(test_content, "AI technology", advanced_options)
        advanced_time = time.time() - start_time
        
        print(f"🔬 Advanced Mode: {advanced_time:.2f} seconds")
        print(f"   Result: {'✅ Success' if advanced_result.get('success') else '❌ Failed'}")
        print(f"   Length: {len(advanced_result.get('summary', ''))}")
        
        # Compare results
        if quick_result.get('success') and advanced_result.get('success'):
            quick_len = len(quick_result.get('summary', ''))
            advanced_len = len(advanced_result.get('summary', ''))
            
            print(f"\n📈 Analysis:")
            print(f"   Advanced is {advanced_len/quick_len:.1f}x longer than Quick")
            print(f"   Both modes: {'✅ Working correctly' if advanced_len > quick_len else '⚠️ May need adjustment'}")
        
        return True
        
    except Exception as e:
        print(f"❌ Speed test failed: {str(e)}")
        return False

def test_app_integration():
    """Test that the enhanced app functions work correctly"""
    print("\n" + "=" * 60)
    print("🔗 Testing App Integration...")
    
    try:
        # Import components
        print("1. Testing imports...")
        from modules.ai_summarizer import AISummarizer
        from modules.web_search import WebSearchEngine
        from utils.pdf_generator import PDFGenerator
        print("✅ All enhanced modules imported successfully")
        
        # Test data structure compatibility
        print("\n2. Testing data structure compatibility...")
        sample_results = {
            'query': 'test enhanced features',
            'search_speed': '⚡ Quick Search (5-15 seconds)',
            'settings': {
                'detailed_formatting': True,
                'include_tables': True,
                'include_bullet_points': True,
                'search_speed': '⚡ Quick Search (5-15 seconds)'
            },
            'summary': {
                'success': True,
                'summary': '## Test Summary\n\n• Enhanced features working\n• Advanced AI formatting enabled',
                'provider': 'Test Provider',
                'structured': True,
                'format_type': 'quick'
            },
            'search_results': [
                {'title': 'Test Result', 'snippet': 'Test content', 'domain': 'example.com'}
            ],
            'timestamp': '2025-01-07T21:13:00'
        }
        
        print("✅ Sample enhanced data structure created")
        
        # Test PDF generation with enhanced data
        print("\n3. Testing PDF generation with enhanced data...")
        pdf_gen = PDFGenerator()
        pdf_content = pdf_gen.generate_pdf(sample_results)
        
        if isinstance(pdf_content, bytes) and len(pdf_content) > 1000:
            print(f"✅ PDF generated successfully: {len(pdf_content):,} bytes")
            print("✅ Enhanced data structures compatible with PDF export")
        else:
            print("❌ PDF generation failed with enhanced data")
        
        return True
        
    except Exception as e:
        print(f"❌ App integration test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all enhanced feature tests"""
    print("🚀 Enhanced AI Research Agent - Feature Testing")
    print("=" * 60)
    
    tests = [
        ("Enhanced Summarization", test_enhanced_summarization),
        ("Speed Mode Differences", test_speed_differences), 
        ("App Integration", test_app_integration)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n🧪 Running: {test_name}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"❌ {test_name} crashed: {str(e)}")
            results[test_name] = False
    
    # Final results
    print("\n" + "=" * 60)
    print("📊 ENHANCED FEATURES TEST RESULTS:")
    print("=" * 60)
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, result in results.items():
        status = "✅ PASS" if result else "❌ FAIL"
        print(f"{status} {test_name}")
        if result:
            passed_tests += 1
    
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"\n🎯 Overall Results: {passed_tests}/{total_tests} tests passed ({success_rate:.0f}%)")
    
    if success_rate == 100:
        print("\n🎉 ALL ENHANCED FEATURES WORKING PERFECTLY!")
        print("Your AI Research Agent now supports:")
        print("✅ Advanced AI structured analysis")
        print("✅ Quick Search (5-15 seconds)")  
        print("✅ Advanced Search (30-60 seconds)")
        print("✅ Enhanced formatting with bullets, headings, tables")
        print("✅ Professional PDF exports with structured content")
        print("✅ Speed-optimized content processing")
    elif success_rate >= 70:
        print("\n🎊 ENHANCED FEATURES MOSTLY WORKING!")
        print("Most features are operational. Check any failed tests above.")
    else:
        print("\n⚠️ SOME ENHANCED FEATURES NEED ATTENTION")
        print("Review the failed tests above for specific issues.")

if __name__ == "__main__":
    main()